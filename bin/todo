#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'todo'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/todo now"
  exit 64
end

include GLI::App

program_desc 'a simple command line todo app'

version Todo::VERSION

subcommand_option_handling :normal
arguments :strict

DEFAULT_TODO_FILE = 'todo.txt' #need to work out how to set home path

# desc 'Describe some switch here'
# switch [:s,:switch]

# use this default flag code to set location of todo list file 

desc 'Path to the todo file'
default_value DEFAULT_TODO_FILE
arg_name 'todo_file'
flag [:f,:filename] 

desc 'Create a new task in the task list'
long_desc "
A task has a name and a priority. By default, new
tasks have the lowest possible priority, though this can be overridden.
"
arg_name 'task_name'
command :new do |c|
  c.desc 'put the new task first in the list'
  c.arg_name 'priority'
  c.switch :f

  c.desc 'set the priority of the new task, 1 being the highest'
  c.arg_name 'priority'
  c.default_value false
  c.flag [:priority]
  c.action do |global_options,options,args|

    todo_file = global_options[:f] ? global_options[:f] : DEFAULT_TODO_FILE

    args.each do |new_task| 

      puts "--priority - #{options[:priority]}"

      File.open(todo_file, 'a+') do |file|
        # adds task to top of list if -f provided or at end otherwise
        if options[:f] == true
          content = file.readlines
            File.open('todo.txt.new', 'w') do |new_file|
            new_file.puts "#{new_task},#{Time.now}" 
            puts "Task added - #{new_task}."
            content.each do |line|
              new_file.puts line
            end
          end 

          `mv todo.txt.new todo.txt` 
          
        elsif options[:priority] != false

          position = options[:priority].to_i - 1 # sets position of new task in list, 1 == first positon. Need to add validation

          tasks = file.readlines
          task_count = tasks.count
          tasks.insert(position, "#{new_task},#{Time.now}") # insert new task into array in given position 

          File.open('todo.txt.new', 'w') do |new_file|
            tasks.each do |task|
              new_file.puts "#{task}" 
            end
          end

          puts "Task added - #{new_task}."

          `mv todo.txt.new todo.txt` 
                  
        else
          file.puts "#{new_task},#{Time.now}"
          puts "Task added - #{new_task}."
        end
      end
    end

  end
end

desc 'List tasks'
arg_name 'query if needed as no arguments'
command :list do |c|
  c.flag :s
  c.action do |global_options,options,args|

    todo_file = global_options[:f] ? global_options[:f] : DEFAULT_TODO_FILE

    todos = read_todos(todo_file) # need to write read_todos function 
    if options[:s] == 'name'
      todos = todos.sort { |a, b| a <=> b }
    end

    counter = 1
    todos.each do |todo|
      name,created,completed = todo.chomp.split(/,/)
      printf("%3d - %s\n",counter,name)
      printf("    Created: %s\n",created)
      unless completed.nil?
        printf("    Completed : %s\n",completed)
      end
      counter += 1
    end
  end
end

desc 'Complete a task'
long_desc "
Record tasks as completed"
arg_name 'task number, e.g. "1"'
command :done do |c|
  c.action do |global_options,options,args|

    todo_file = global_options[:f] ? global_options[:f] : DEFAULT_TODO_FILE
    task_number = args.shift.to_i #need to provide for multiple completed tasks

    File.open(todo_file, 'r') do |file| 
    File.open('todo.txt.new', 'w') do |new_file|
      counter = 1
      file.readlines.each do |line|
      name,created,completed = line.chomp.split(/,/)
        if task_number == counter
          new_file.puts("#{name},#{created},#{Time.now}")
          puts "Task #{counter} completed"
        else
          new_file.puts("#{name},#{created},#{completed}")
        end

        counter += 1
      end
    end
    end

    `mv todo.txt.new todo.txt`



    puts "Global:"
    puts "-f - #{todo_file}"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
